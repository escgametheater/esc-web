<?php
/**
 * Created by PhpStorm.
 * User: christophercarter
 * Date: 6/2/18
 * Time: 10:03 PM
 */

Entities::uses('activities');
class ActivityManager extends BaseEntityManager
{
    protected $entityClass = ActivityEntity::class;
    protected $table = Table::ActivityTracking;
    protected $table_alias = TableAlias::ActivityTracking;
    protected $pk = DBField::ACTIVITY_ID;

    protected $foreign_managers = [
        ActivityTypesManager::class => DBField::ACTIVITY_TYPE_ID,
        SessionTrackingManager::class => DBField::SESSION_ID,
        GuestTrackingManager::class => DBField::GUEST_ID,
    ];

    // Global Namespace Key Prefix -- Used for CMS and Cache.
    const GNS_KEY_PREFIX = GNS_ROOT.'.activity';

    const IS_NOTIFICATION = 1;
    const IS_NOT_NOTIFICATION = 0;

    public static $fields = [
        DBField::ACTIVITY_ID,
        DBField::ACTIVITY_TYPE_ID,
        DBField::GUEST_ID,
        DBField::SESSION_ID,
        DBField::CONTEXT_ENTITY_ID,
        DBField::ENTITY_ID,
        DBField::OWNER_USER_ID,
        DBField::REF,
        DBField::GEO_REGION_ID,
        DBField::CREATOR_USER_ID,
        DBField::ET_ID,
        DBField::ACQ_MEDIUM,
        DBField::ACQ_SOURCE,
        DBField::ACQ_CAMPAIGN,
        DBField::ACQ_TERM,
        DBField::CREATE_TIME,
        DBField::CREATED_BY
    ];

    public $removed_json_fields = [
        DBField::IS_DELETED
    ];

    /**
     * @param ActivityEntity $data
     * @param Request $request
     * @return DBManagerEntity
     */
    public function processVFields(DBManagerEntity $data, Request $request)
    {
        if ($data->hasField(DBField::DEVICE_TYPE_ID)) {
            $deviceTypeName = GuestTrackingManager::getDeviceTypeName($data->field(DBField::DEVICE_TYPE_ID));

            $data->updateField(VField::DEVICE_TYPE_NAME, $deviceTypeName);
        }

        if (!$data->hasField(VField::OWNER_USER))
            $data->updateField(VField::OWNER_USER, []);

        if (!$data->hasField(VField::CREATOR_USER))
            $data->updateField(VField::CREATOR_USER, []);

        if (!$data->hasField(VField::ENTITY))
            $data->updateField(VField::ENTITY, []);

        if (!$data->hasField(VField::CONTEXT))
            $data->updateField(VField::CONTEXT, []);

        return parent::processVFields($data, $request); // TODO: Change the autogenerated stub
    }

    /**
     * @param Request $request
     * @param ActivityEntity|ActivityEntity[] $activities
     */
    public function postProcessActivities(Request $request, $activities)
    {
        $usersManager = $request->managers->users();

        if ($activities) {
            if ($activities instanceof ActivityEntity)
                $activities = [$activities];

            /** @var ActivityEntity[] $activities */
            $activities = $this->index($activities);
            $activityIds = array_keys($activities);

            $gameIds = [];
            $gameModIds = [];
            $gameBuildIds = [];
            $gameModBuildIds = [];

            $userIds = [];

            foreach ($activities as $activity) {
                if (!in_array($activity->getOwnerUserId(), $userIds))
                    $userIds[] = $activity->getOwnerUserId();

                if (!in_array($activity->getCreatorUserId(), $userIds))
                    $userIds[] = $activity->getCreatorUserId();
            }

            $users = $usersManager->getUsersByIds($request, $userIds);
            /** @var UserEntity[] $users */
            $users = $usersManager->index($users);

            foreach ($activities as $activity) {
                if (array_key_exists($activity->getOwnerUserId(), $users))
                    $activity->setOwnerUser($users[$activity->getOwnerUserId()]);

                if (array_key_exists($activity->getCreatorUserId(), $users))
                    $activity->setOwnerUser($users[$activity->getCreatorUserId()]);
            }

        }
    }


    /**
     * @param Request $request
     * @param $activityTypeId
     * @param $objectSourceId
     * @param $objectId
     * @param $objectLangId
     * @param $ownerUser
     * @return ActivityEntity
     */

    public function trackActivity(Request $request, $activityTypeId, $objectSourceId, $objectId, $objectLangId, $ownerUser)
    {
        $activityTypesManager = $request->managers->activityTypes();

        // Create Activity Record
        $activityData = [
            DBField::ACTIVITY_TYPE_ID => $activityTypeId,
            DBField::GUEST_ID => $request->user->guest->getGuestId(),
            DBField::SESSION_ID => $request->user->session->getSessionId(),
            DBField::GEO_REGION_ID => $request->geoRegion->getPk(),
            DBField::CREATOR_USER_ID => $request->user->id,
            DBField::CREATOR_USER_UI_LANG => $request->translations->get_lang(),
            DBField::OWNER_USER_ID => $ownerUser[DBField::USER_ID],
            DBField::CONTEXT_ENTITY_ID => $objectSourceId,
            DBField::ENTITY_ID => $objectId,
            //DBField::OBJECT_LANG => $objectLangId,
            DBField::REF => $request->getReferer(),
            DBField::ET_ID => $request->user->session->getLastEtId(),
            DBField::ACQ_MEDIUM => $request->user->session->getLastUtmMedium(),
            DBField::ACQ_SOURCE => $request->user->session->getLastUtmSource(),
            DBField::ACQ_CAMPAIGN => $request->user->session->getLastUtmCampaign(),
            DBField::ACQ_TERM => $request->user->session->getLastUtmTerm(),
            DBField::CREATE_TIME => $request->getCurrentSqlTime(),
            DBField::CREATED_BY => $request->requestId,
        ];

        /** @var ActivityEntity $activity */
        $activity = $this->query($request->db)->createNewEntity($request, $activityData, false);

        $activityType = $activityTypesManager->getActivityTypeById($request, $activityTypeId);

        $eventProperties = [
            'activityId' => $activity->getPk(),
            'displayName' => $activityType ? $activityType->getDisplayName() : null,
            'activityTypeId' => $activity->getActivityTypeId(),
            'acqMedium' => $activity->getAcqMedium(),
            'acqSource' => $activity->getAcqSource(),
            'acqCampaign' => $activity->getAcqCampaign(),
            'acqTerm' => $activity->getAcqTerm(),
            'contextEntityId' => $activity->getContextEntityId(),
            'entityId' => $activity->getEntityId(),
            'ref' => $request->getReferer(),
        ];
        $request->user->session->sendSessionMixpanelEvent('activityTracking', $eventProperties);

        return $activity;
    }


    /**
     * @param Request $request
     * @param $activityIds
     * @return ActivityEntity[]
     */
    public function getActivitiesByIds(Request $request, $activityIds)
    {
        /** @var ActivityEntity[] $activities */
        $activities =  $this->query($request->db)
            ->filter($this->filters->byPk($activityIds))
            ->get_entities($request);

        $this->postProcessActivities($request, $activities);

        return $this->index($activities);
    }

    /**
     * @param Request $request
     * @param $contextEntityId
     * @param $entityId
     * @param $userId
     * @param $sessionId
     * @return array|ActivityEntity
     */
    public function getActivityByContextAndSession(Request $request, $contextEntityId, $entityId, $userId, $sessionId)
    {
        return $this->query($request->db)
            ->filter($this->filters->byContextEntityId($contextEntityId))
            ->filter($this->filters->byEntityId($entityId))
            ->filter($this->filters->byCreatorUserId($userId))
            ->filter($this->filters->bySessionId($sessionId))
            ->get_entity($request);
    }

    /**
     * @param Request $request
     * @param $creatorUserId
     * @param int $page
     * @param int $perpage
     * @return ActivityEntity[]
     */
    public function getActivitiesByUserId(Request $request, $creatorUserId, $page = 1, $perpage = DEFAULT_PERPAGE)
    {
        $activityTypesManager = $request->managers->activityTypes();
        $sessionsManager = $request->managers->sessionTracking();
        $guestsManager = $request->managers->guestTracking();

        $fields = $this->createDBFields();
        $fields[] = $activityTypesManager->field(DBField::DISPLAY_NAME);
        $fields[] = $sessionsManager->field(DBField::DEVICE_TYPE_ID);
        $fields[] = $sessionsManager->field(DBField::IP);

        return $this->query($request->db)
            ->fields($fields)
            ->inner_join($activityTypesManager)
            ->inner_join($sessionsManager)
            ->filter($this->filters->byCreatorUserId($creatorUserId))
            ->paging($page, $perpage)
            ->sort_desc($this->getPkField())
            ->get_entities($request);
    }

    /**
     * @param $id
     * @return array
     */
    public function getActivityContextById($id)
    {
        $db = DB::inst(SQLN_SITE);
        $id = $db->quote_value($id);
        $activity = $this->query($db)
            ->sql("
                SELECT
                    A.activity_id,
                    A.activity_type_id as activity_type_id,
                    AT.display_name as activity_type_display,
                    A.entity_id,
                    A.owner_user_id,
                    OU.username as owner_user_name,
                    A.geo_region_id,
                    ACLGR.display_name as geo_region_display,
                    A.creator_user_id,
                    CU.username as creator_user_name,
                    CU.join_date as creator_user_join_date,
                    CUP.display_name as creator_user_real_name,
                    CUS.original_uri as creator_user_session_landing_page,
                    CUS.acq_medium as creator_user_session_medium,
                    CUS.acq_source as creator_user_session_source,
                    CUS.acq_campaign as creator_user_session_campaign,
                    CUS.et_id as creator_user_session_et_id,
                    CUS.original_ref as creator_user_session_referer,
                    CUS.device_type_id as creator_user_device_type_id,
                    CUS.http_user_agent as creator_user_http_user_agent,
                    CUS.ui_language_id as creator_user_ui_lang,
                    CUS.country as creator_user_country_id,
                    CUS.is_first_session_of_guest as creator_user_is_first_session_of_guest,
                    CUCO.display_name as creator_user_country,
                    CUS.ip as creator_user_ip,
                    A.guest_id as creator_user_guest_id,
                    A.session_id as creator_user_session_id,
                    CUS.session_hash as creator_user_session_hash,
                    A.ref as referring_page,
                    A.create_time
                FROM activity A
                INNER JOIN activity_type AT
                    on (
                      AT.activity_type_id = A.activity_type_id
                    )
                INNER JOIN geo_region ACLGR
                    on (
                      ACLGR.geo_region_id = A.geo_region_id
                    )
                LEFT JOIN esc_user OU
                    on (
                      A.owner_user_id = OU.user_id
                    )
                LEFT JOIN esc_user CU
                    on (
                      A.creator_user_id = CU.user_id
                    )
                LEFT JOIN user_profile CUP
                    on (
                      CU.user_id = CUP.user_id
                    )
                LEFT JOIN session CUS
                    on (
                      CUS.session_id = A.session_id
                    )
                LEFT JOIN country CUCO
                    on (
                      CUS.country = CUCO.country_id
                    )
                WHERE
                    A.activity_id = {$id}
            ");
        $activity = isset($activity[0]) ? $activity[0] : $activity;
        if (!empty($activity)) {
            $activity['creator_user_device_type_name'] = GuestTrackingManager::getDeviceTypeName($activity['creator_user_device_type_id']);
        }

        return $activity;
    }

}

class ActivityTypesManager extends BaseEntityManager
{
    const ACTIVITY_TYPE_USER_REGISTRATION = 1; // Done
    const ACTIVITY_TYPE_USER_LOGIN = 2; // Done
    const ACTIVITY_TYPE_USER_LOGOUT = 3; // Done
    const ACTIVITY_TYPE_USER_EMAIL_SETTINGS_UPDATE = 4;
    const ACTIVITY_TYPE_USER_REGISTRATION_VERIFICATION_EMAIL = 5;
    const ACTIVITY_TYPE_USER_RESET_PASSWORD = 6; // Done
    const ACTIVITY_TYPE_USER_REGISTRATION_VERIFICATION_EMAIL_RESEND = 7;
    const ACTIVITY_TYPE_USER_RESET_PASSWORD_REQUEST = 8;
    const ACTIVITY_TYPE_USER_UI_LANG_CHANGE = 9;
    const ACTIVITY_TYPE_USER_API_LOGIN_REQUEST_TOKEN = 10; // Done
    const ACTIVITY_TYPE_USER_REGISTRATION_PLAY_NYC_BETA = 11; // Done
    const ACTIVITY_TYPE_USER_REGISTRATION_BETA = 12; //Done
    const ACTIVITY_TYPE_USER_EMAIL_CHANGE = 13;
    const ACTIVITY_TYPE_USER_PASSWORD_CHANGE = 14;
    const ACTIVITY_TYPE_USER_PROFILE_UPDATE = 15;
    const ACTIVITY_TYPE_USER_LOGIN_MAGIC_LINK = 16;
    const ACTIVITY_TYPE_USER_REGISTRATION_SSO_GOOGLE = 17; // Done
    const ACTIVITY_TYPE_USER_REGISTRATION_SSO_FACEBOOK = 18;
    const ACTIVITY_TYPE_USER_REGISTRATION_SSO_TWITTER = 19;
    const ACTIVITY_TYPE_USER_LOGIN_SSO_GOOGLE = 20; // Done
    const ACTIVITY_TYPE_USER_LOGIN_SSO_FACEBOOK = 21;
    const ACTIVITY_TYPE_USER_LOGIN_SSO_TWITTER = 22;
    const ACTIVITY_TYPE_USER_REGISTRATION_VERIFICATION_SSO = 23; // Done


    const ACTIVITY_TYPE_USER_PROFILE_IMAGE_UPLOAD = 24; // Done
    const ACTIVITY_TYPE_GAME_PROFILE_IMAGE_UPLOAD = 25; // Done
    const ACTIVITY_TYPE_USER_CREATE_ORGANIZATION = 26;
    const ACTIVITY_TYPE_USER_CREATE_GAME = 27; // Done
    const ACTIVITY_TYPE_USER_UPLOAD_GAME_BUILD = 28; // Done
    const ACTIVITY_TYPE_USER_UPLOAD_GAME_CONTROLLER = 29; // Done
    const ACTIVITY_TYPE_USER_SET_BUILD_ACTIVE = 30; // Done
    const ACTIVITY_TYPE_USER_ADD_GAME_LICENSE = 31; // Done
    const ACTIVITY_TYPE_USER_DELETE_GAME_BUILD = 32; // Done
    const ACTIVITY_TYPE_USER_DELETE_GAME_CONTROLLER = 33; // Done
    const ACTIVITY_TYPE_USER_UPLOAD_CUSTOM_GAME_ASSET_FILE = 34; // Done
    const ACTIVITY_TYPE_USER_DOWNLOAD_HOST_BUILD = 35; // Done
    const ACTIVITY_TYPE_USER_START_HOST_INSTANCE = 36; // Done
    const ACTIVITY_TYPE_USER_INVITE_HOST_PLAYERS = 37; // Done
    const ACTIVITY_TYPE_USER_INVITE_GAME_PLAYERS = 38; // Done
    const ACTIVITY_TYPE_USER_UPLOAD_GAME_SPREADSHEET = 39; // Done
    const ACTIVITY_TYPE_USER_DELETE_GAME_LICENSE = 40; // Done
    const ACTIVITY_TYPE_USER_SET_CUSTOM_GAME_ASSET_ACTIVE = 41; // Done
    const ACTIVITY_TYPE_USER_DELETE_CUSTOM_GAME_ASSET = 42; // Done
    const ACTIVITY_TYPE_USER_DELETE_CUSTOM_GAME_ASSET_FILE = 43; // Done
    const ACTIVITY_TYPE_USER_START_GAME_INSTANCE = 44; // Done

    const ACTIVITY_TYPE_USER_ADMIN_RESET_PASSWORD = 45; // Done

    const ACTIVITY_TYPE_USER_ADMIN_KPI_REGEN = 46; // Done

    const ACTIVITY_TYPE_ADMIN_REGISTRATION_USER_INVITE = 47; // Done
    const ACTIVITY_TYPE_ADMIN_REGISTRATION_USER_VERIFICATION = 48; // Done
    const ACTIVITY_TYPE_ADMIN_ADD_USER_TO_GROUP = 49; // Done
    const ACTIVITY_TYPE_USER_PUBLISH_GAME_BUILD = 50; // Done


    const ACTIVITY_TYPE_USER_REGISTRATION_SHAKE = 51; // Done
    const ACTIVITY_TYPE_USER_USER_GROUP_OPT_IN = 52; // Done
    const ACTIVITY_TYPE_USER_VERIFICATION_IN_PERSON = 53; // Done
    const ACTIVITY_TYPE_USER_DOWNLOAD_GAME_BUILD_ZIP = 54; // Done
    const ACTIVITY_TYPE_USER_DOWNLOAD_GAME_BUILD_CUSTOM_ASSETS_ZIP = 55; // Done
    const ACTIVITY_TYPE_USER_DOWNLOAD_GAME_BUILD_CONTROLLER_ASSETS_ZIP = 56; // Done


    const ACTIVITY_TYPE_USER_CREATE_GAME_MOD = 57;
    const ACTIVITY_TYPE_USER_DELETE_GAME_MOD = 58;
    const ACTIVITY_TYPE_USER_SET_MOD_BUILD_ACTIVE = 59;
    const ACTIVITY_TYPE_USER_PUBLISH_GAME_MOD = 60;
    const ACTIVITY_TYPE_USER_UPLOAD_CUSTOM_GAME_MOD_ASSET = 61;
    const ACTIVITY_TYPE_USER_SET_CUSTOM_GAME_MOD_ASSET_ACTIVE = 62;
    const ACTIVITY_TYPE_USER_UPLOAD_CUSTOM_GAME_MOD_DATA_SPREADSHEET = 63;
    const ACTIVITY_TYPE_USER_ADD_ORG_GAME_LICENSE = 64;
    const ACTIVITY_TYPE_TEAM_USER_INVITE = 65;
    const ACTIVITY_TYPE_USER_CREATE_GAME_MOD_BUILD = 66;
    const ACTIVITY_TYPE_USER_UPLOAD_CUSTOM_GAME_MOD_ASSET_FILE = 67;
    const ACTIVITY_TYPE_USER_DELETE_CUSTOM_GAME_MOD_ASSET = 68;
    const ACTIVITY_TYPE_USER_DELETE_CUSTOM_GAME_MOD_ASSET_FILE = 69;


    const ACTIVITY_TYPE_USER_REGISTRATION_GAME_INSTANCE = 70;
    const ACTIVITY_TYPE_USER_REGISTRATION_HOST_INSTANCE = 71;
    const ACTIVITY_TYPE_USER_REGISTRATION_GAME_BUILD = 72;
    const ACTIVITY_TYPE_USER_REGISTRATION_GAME = 73;
    const ACTIVITY_TYPE_USER_REGISTRATION_HOST = 74;
    const ACTIVITY_TYPE_USER_REGISTRATION_PLAY = 75;

    const ACTIVITY_TYPE_USER_ACTIVATION_IMAGE_UPLOAD = 76; // Done
    const ACTIVITY_TYPE_USER_HOST_IMAGE_UPLOAD = 77; // Done

    const ACTIVITY_TYPE_USER_DOWNLOAD_GAME_MOD_BUILD_CUSTOM_ASSETS_ZIP = 78;
    const ACTIVITY_TYPE_USER_ADD_GAME_MOD_LICENSE = 79;
    const ACTIVITY_TYPE_USER_DELETE_GAME_MOD_LICENSE = 80;

    const ACTIVITY_TYPE_USER_DOWNLOAD_SDK_BUILD = 81;
    const ACTIVITY_TYPE_USER_TEAM_PROFILE_IMAGE_UPLOAD = 82;

    const ACTIVITY_TYPE_USER_ADD_ACTIVATION = 83;
    const ACTIVITY_TYPE_USER_ADD_ACTIVATION_GROUP = 84;
    const ACTIVITY_TYPE_USER_ORGANIZATION_USER_INVITE_REGISTRATION = 85;

    const ACTIVITY_TYPE_USER_DOWNLOAD_GAME_BUILD = 86;

    protected $pk = DBField::ACTIVITY_TYPE_ID;
    protected $entityClass = ActivityTypeEntity::class;
    protected $table = Table::ActivityTypes;
    protected $table_alias = TableAlias::ActivityTypes;

    public static $fields = [
        DBField::ACTIVITY_TYPE_ID,
        DBField::DISPLAY_NAME
    ];

    /**
     * @param Request $request
     * @param $type_id
     * @return ActivityTypeEntity
     * @throws ObjectNotFound
     */
    public function getActivityTypeById(Request $request, $type_id)
    {
        return $this->query($request->db)->byPk($type_id)->get_entity($request);
    }

    /**
     * @param Request $request
     * @return ActivityTypeEntity[]
     */
    public function getAllActivityTypes(Request $request)
    {
        return $this->query($request->db)->get_entities($request);
    }
}