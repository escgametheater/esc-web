<?php
/**
 * Created by PhpStorm.
 * User: christophercarter
 * Date: 11/29/18
 * Time: 12:16 PM
 */


Entities::uses('hosts-builds');

class HostVersionsManager extends BaseEntityManager
{
    protected $entityClass = HostVersionEntity::class;
    protected $table = Table::HostVersion;
    protected $table_alias = TableAlias::HostVersion;
    protected $pk = DBField::HOST_VERSION_ID;

    const UPDATE_CHANNEL_LIVE = 'live';
    const UPDATE_CHANNEL_TEST = 'test';

    public static $fields = [
        DBField::HOST_VERSION_ID,
        DBField::VERSION,
        DBField::USER_ID,
        DBField::HOST_UPDATE_CHANNEL,
        DBField::IS_DEPRECATED,
        DBField::IS_ACTIVE,
        DBField::CREATE_TIME,
        DBField::CREATED_BY,
        DBField::MODIFIED_BY,
        DBField::DELETED_BY
    ];

    /**
     * @param HostVersionEntity $data
     * @param Request $request
     * @return HostVersionEntity
     */
    public function processVFields(DBManagerEntity $data, Request $request)
    {
        if (!$data->hasField(VField::HOST_BUILDS))
            $data->updateField(VField::HOST_BUILDS, []);

        if (!$data->hasField(VField::HOST_CONTROLLER))
            $data->updateField(VField::HOST_CONTROLLER, []);

        if (!$data->hasField(VField::USER))
            $data->updateField(VField::USER, []);

        $editUrl = $request->getWwwUrl("/admin/host-app/edit-version/{$data->getPk()}");
        $data->updateField(VField::EDIT_URL, $editUrl);

        return parent::processVFields($data, $request); // TODO: Change the autogenerated stub
    }

    /**
     * @param Request $request
     * @param HostVersionEntity|HostVersionEntity[]
     */
    protected function postProcessHostVersions(Request $request, $hostVersions, $expand = true)
    {
        $usersManager = $request->managers->users();
        $hostBuildsManager = $request->managers->hostBuilds();
        $hostsControllersManager = $request->managers->hostControllers();

        if ($hostVersions) {
            if ($hostVersions instanceof HostVersionEntity)
                $hostVersions = [$hostVersions];

            /** @var HostVersionEntity[] $hostVersions */
            $hostVersions = array_index($hostVersions, $this->getPkField());
            $hostVersionIds = array_keys($hostVersions);

            $userIds = unique_array_extract(DBField::USER_ID, $hostVersions);
            $users = $usersManager->getUsersByIds($request, $userIds);
            /** @var UserEntity[] $users */
            $users = array_index($users, $usersManager->getPkField());

            $hostBuilds = $hostBuildsManager->getHostBuildsByHostVersionId($request, $hostVersionIds, $expand);
            foreach ($hostBuilds as $hostBuild) {
                $hostVersions[$hostBuild->getHostVersionId()]->setHostBuild($hostBuild);
            }

            foreach ($hostVersions as $hostVersion) {
                if (isset($users[$hostVersion->getUserId()]))
                    $hostVersion->setUser($users[$hostVersion->getUserId()]);
            }

            $hostControllers = $hostsControllersManager->getHostControllersByHostVersionIds($request, $hostVersionIds, $expand);
            foreach ($hostControllers as $hostController) {
                $hostVersions[$hostController->getHostVersionId()]->setHostController($hostController);
            }

        }
    }

    /**
     * @param Request $request
     * @param $hostVersionIds
     * @param bool $expand
     * @return HostVersionEntity[]
     */
    public function getHostVersionsByIds(Request $request, $hostVersionIds, $expand = false)
    {
        $hostVersions = $this->query($request->db)
            ->filter($this->filters->byPk($hostVersionIds))
            ->get_entities($request);

        if ($expand)
            $this->postProcessHostVersions($request, $hostVersions);

        if ($hostVersions)
            $hostVersions = array_index($hostVersions, $this->getPkField());

        return $hostVersions;
    }

    /**
     * @param Request $request
     * @param $hostVersionNumber
     * @param string $hostUpdateChannel
     * @return HostVersionEntity
     */
    public function createNewHostVersion(Request $request, $hostVersionNumber, $hostUpdateChannel = self::UPDATE_CHANNEL_LIVE)
    {
        $data = [
            DBField::VERSION => $hostVersionNumber,
            DBField::HOST_UPDATE_CHANNEL => $hostUpdateChannel,
            DBField::USER_ID => $request->user->id,
        ];

        /** @var HostVersionEntity $hostVersion */
        $hostVersion = $this->query($request->db)->createNewEntity($request, $data);

        return $hostVersion;
    }

    /**
     * @param Request $request
     * @param $hostVersionId
     * @param bool $expand
     * @return HostVersionEntity
     */
    public function getHostVersionById(Request $request, $hostVersionId, $expand = false)
    {
        /** @var HostVersionEntity $hostVersion */
        $hostVersion = $this->query($request->db)
            ->filter($this->filters->byPk($hostVersionId))
            ->get_entity($request);

        $this->postProcessHostVersions($request, $hostVersion, $expand);

        return $hostVersion;
    }

    /**
     * @param Request $request
     * @param string $hostUpdateChannel
     * @return HostVersionEntity
     */
    public function getActiveHostVersionByHostUpdateChannel(Request $request, $hostUpdateChannel = self::UPDATE_CHANNEL_LIVE)
    {
        /** @var HostVersionEntity $hostVersion */
        $hostVersion = $this->query($request->db)
            ->filter($this->filters->byHostUpdateChannel($hostUpdateChannel))
            ->filter($this->filters->isActive())
            ->sort_desc($this->getPkField())
            ->get_entity($request);

        $this->postProcessHostVersions($request, $hostVersion);

        return $hostVersion;
    }

    /**
     * @param Request $request
     * @param $hostVersionNumber
     * @param $platformId
     * @param string $channel
     * @return HostVersionEntity
     */
    public function getHostVersionByHostVersionNumberAndPlatformId(Request $request, $hostVersionNumber, $platformId,
                                                                   $channel = self::UPDATE_CHANNEL_LIVE)
    {
        $hostBuildsManager = $request->managers->hostBuilds();

        $joinHostBuildsFilter = $hostBuildsManager->filters->And_(
            $hostBuildsManager->filters->byHostVersionId($this->createPkField()),
            $hostBuildsManager->filters->isActive()
        );

        /** @var HostVersionEntity $hostVersion */
        $hostVersion = $this->query($request->db)
            ->inner_join($hostBuildsManager, $joinHostBuildsFilter)
            ->filter($this->filters->byVersion($hostVersionNumber))
            ->filter($this->filters->isActive())
            ->filter($this->filters->byHostUpdateChannel($channel))
            ->filter($hostBuildsManager->filters->byPlatformId($platformId))
            ->sort_desc($hostBuildsManager->field(DBField::CREATE_TIME))
            ->sort_desc($this->field(DBField::CREATE_TIME))
            ->get_entity($request);

        //$this->postProcessHostVersions($request, $hostVersion, true);

        return $hostVersion;
    }

    public function getHostVersionByHostVersionNumber(Request $request, $hostVersionNumber,
                                                                   $expand = false,
                                                                   $channel = self::UPDATE_CHANNEL_LIVE)
    {

        /** @var HostVersionEntity $hostVersion */
        $hostVersion = $this->query($request->db)
            ->filter($this->filters->byVersion($hostVersionNumber))
            ->filter($this->filters->isActive())
            ->filter($this->filters->byHostUpdateChannel($channel))
            ->sort_desc($this->field(DBField::CREATE_TIME))
            ->get_entity($request);

        if ($expand) {
            $this->postProcessHostVersions($request, $hostVersion, $expand);
        }

        return $hostVersion;
    }


    /**
     * @param Request $request
     * @param string $hostUpdateChannel
     * @return HostVersionEntity[]
     */
    public function getActiveHostVersions(Request $request, $includeDeprecated = false)
    {
        $deprecatedFilter = $includeDeprecated ? null : $this->filters->isNotDeprecated();

        /** @var HostVersionEntity[] $hostVersions */
        $hostVersions = $this->query($request->db)
            ->filter($this->filters->isActive())
            ->filter($deprecatedFilter)
            ->sort_desc($this->getPkField())
            ->get_entities($request);

        $this->postProcessHostVersions($request, $hostVersions);

        return $hostVersions;
    }
}

class HostVersionsPlatformsChannelsManager extends BaseEntityManager
{
    protected $entityClass = HostVersionPlatformChannelEntity::class;
    protected $table = Table::HostVersionPlatformChannel;
    protected $table_alias = TableAlias::HostVersionPlatformChannel;
    protected $pk = DBField::HOST_VERSION_PLATFORM_CHANNEL_ID;

    public static $fields = [
        DBField::HOST_VERSION_PLATFORM_CHANNEL_ID,
    ];
}

class HostBuildsManager extends BaseEntityManager
{
    protected $entityClass = HostBuildEntity::class;
    protected $table = Table::HostBuild;
    protected $table_alias = TableAlias::HostBuild;
    protected $pk = DBField::HOST_BUILD_ID;

    const ZIP_ROOT_FILE_IDENTIFIER = 'builder-effective-config.yaml';

    public static $fields = [
        DBField::HOST_BUILD_ID,
        DBField::HOST_VERSION_ID,
        DBField::PLATFORM_ID,
        DBField::VERSION_HASH,
        DBField::BUILD_VERSION,
        DBField::USER_ID,
        DBField::IS_ACTIVE,
        DBField::CREATE_TIME,
        DBField::CREATED_BY,
        DBField::MODIFIED_BY,
        DBField::DELETED_BY
    ];

    public $foreign_managers = [
        PlatformsManager::class => DBField::PLATFORM_ID,
        HostVersionsManager::class => DBField::HOST_VERSION_ID,
    ];

    /**
     * @return string
     */
    public function getZipRootFileIdentifier()
    {
        return self::ZIP_ROOT_FILE_IDENTIFIER;
    }

    /**
     * @return string
     */
    public function generateZipDestinationPath()
    {
        global $CONFIG;

        $mediaDir = $CONFIG[ESCConfiguration::DIR_MEDIA];

        $uniqueDirName = uuidV4HostName();

        return "{$mediaDir}/host-app/build-{$uniqueDirName}/";
    }


    /**
     * @param HostBuildEntity $data
     * @param Request $request* @return HostBuildEntity|void
     */
    public function processVFields(DBManagerEntity $data, Request $request)
    {
        if (!$data->hasField(VField::HOST_ASSETS))
            $data->updateField(VField::HOST_ASSETS, []);

        if (!$data->hasField(VField::PLATFORM))
            $data->updateField(VField::PLATFORM, []);

        if (!$data->hasField(VField::HOST_VERSION))
            $data->updateField(VField::HOST_VERSION, []);
    }

    /**
     * @param Request $request
     * @param HostBuildEntity[] $hostBuilds
     */
    protected function postProcessHostBuilds(Request $request, $hostBuilds = [], $expand = false)
    {
        $hostAssetsManager = $request->managers->hostAssets();
        $platformsManager = $request->managers->platforms();
        $usersManager = $request->managers->users();

        if ($hostBuilds) {
            if ($hostBuilds instanceof HostBuildEntity)
                $hostBuilds = [$hostBuilds];

            /** @var HostBuildEntity[] $hostBuilds */
            $hostBuilds = array_index($hostBuilds, $this->getPkField());
            $hostBuildIds = array_keys($hostBuilds);

            $userIds = unique_array_extract(DBField::USER_ID, $hostBuilds);

            $users = $usersManager->getUsersByIds($request, $userIds);
            /** @var UserEntity[] $users */
            $users = array_index($users, $usersManager->getPkField());

            $platforms = $platformsManager->getAllPlatforms($request);
            /** @var PlatformEntity[] $platforms */
            $platforms = array_index($platforms, $platformsManager->getPkField());

            foreach ($hostBuilds as $hostBuild) {
                $platform = $platforms[$hostBuild->getPlatformId()];
                $hostBuild->setPlatform($platform);

                if (isset($users[$hostBuild->getUserId()]))
                    $hostBuild->setUser($users[$hostBuild->getUserId()]);
            }

            $hostBuildAssets = $hostAssetsManager->getHostBuildAssetsByHostBuildIds($request, $hostBuildIds);

            foreach ($hostBuildAssets as $hostBuildAsset) {
                $hostBuilds[$hostBuildAsset->getHostBuildId()]->setHostAsset($hostBuildAsset);
            }
        }
    }

    /**
     * @param Request $request
     * @param $platformId
     * @param $hostVersionId
     * @return int|string
     */
    public function getNextBuildNumberForPlatformVersion(Request $request, $platformId, $hostVersionId)
    {
        try {

            $buildVersion = $this->query($request->db)
                ->filter($this->filters->byPlatformId($platformId))
                ->filter($this->filters->byHostVersionId($hostVersionId))
                ->sort_desc($this->field(DBField::BUILD_VERSION))
                ->get_value(DBField::BUILD_VERSION);

            $buildVersion++;

        } catch (ObjectNotFound $e) {
            $buildVersion = 1;
        }

        return $buildVersion;
    }

    /**
     * @param Request $request
     * @param $hostVersionId
     * @param $platformId
     * @param $hostBuildVersionNumber
     * @return HostBuildEntity
     */
    public function createNewHostBuild(Request $request, $hostVersionId, $platformId, $versionHash = null)
    {
        $buildVersion = $this->getNextBuildNumberForPlatformVersion($request, $platformId, $hostVersionId);

        $data = [
            DBField::HOST_VERSION_ID => $hostVersionId,
            DBField::PLATFORM_ID => $platformId,
            DBField::VERSION_HASH => $versionHash,
            DBField::BUILD_VERSION => $buildVersion,
            DBField::CREATE_TIME => $request->getCurrentSqlTime(),
            DBField::USER_ID => $request->user->id,
        ];

        /** @var HostBuildEntity $hostBuild */
        $hostBuild = $this->query($request->db)->createNewEntity($request, $data);

        return $hostBuild;
    }

    /**
     * @param Request $request
     * @param $versionHash
     * @return array|HostBuildEntity
     */
    public function getHostBuildByVersionHash(Request $request, $versionHash)
    {
        return $this->query($request->db)
            ->filter($this->filters->byVersionHash($versionHash))
            ->get_entity($request);
    }

    /**
     * @param Request $request
     * @param $hostBuildId
     * @return array|HostBuildEntity
     */
    public function getHostBuildById(Request $request, $hostBuildId, $expand = false)
    {
        /** @var HostBuildEntity $hostBuild */
        $hostBuild = $this->query($request)
            ->filter($this->filters->byHostBuildId($hostBuildId))
            ->get_entity($request);

        $this->postProcessHostBuilds($request, $hostBuild, $expand);

        return $hostBuild;
    }

    /**
     * @param Request $request
     * @param $hostVersionId
     * @param bool $expand
     * @return HostBuildEntity[]
     */
    public function getHostBuildsByHostVersionId(Request $request, $hostVersionId, $expand = false)
    {
        /** @var HostBuildEntity[] $hostBuilds */
        $hostBuilds = $this->query($request)
            ->filter($this->filters->isActive())
            ->filter($this->filters->byHostVersionId($hostVersionId))
            ->get_entities($request);

        $this->postProcessHostBuilds($request, $hostBuilds, $expand);

        return $hostBuilds;
    }

    /**
     * @param Request $request
     * @param $platformSlug
     * @param string $hostUpdateChannel
     * @return HostBuildEntity
     * @throws ObjectNotFound
     */
    public function getLatestHostBuildByPlatform(Request $request, $platformSlug, $hostUpdateChannel = HostVersionsManager::UPDATE_CHANNEL_LIVE)
    {
        $platformsManager = $request->managers->platforms();
        $hostVersionsManager = $request->managers->hostVersions();
        $hostBuildsActiveManager = $request->managers->hostBuildsActive();

        $joinHostBuildsActiveFilter = $hostBuildsActiveManager->filters->And_(
            $hostBuildsActiveManager->filters->byHostBuildId($this->createPkField()),
            $hostBuildsActiveManager->filters->byPlatformId($this->field(DBField::PLATFORM_ID)),
            $hostBuildsActiveManager->filters->isActive()
        );

        /** @var HostBuildEntity $hostBuild */
        $hostBuild = $this->query($request->db)
            ->fields($this->selectAliasedManagerFields($hostVersionsManager))
            ->inner_join($platformsManager)
            ->inner_join($hostVersionsManager)
            ->inner_join($hostBuildsActiveManager, $joinHostBuildsActiveFilter)
            ->filter($this->filters->isActive())
            ->filter($platformsManager->filters->bySlug($platformSlug))
            ->filter($platformsManager->filters->isActive())
            ->filter($hostVersionsManager->filters->isActive())
            ->filter($hostVersionsManager->filters->byHostUpdateChannel($hostUpdateChannel))
            ->sort_desc($hostVersionsManager->field(DBField::CREATE_TIME))
            ->sort_desc($this->field(DBField::CREATE_TIME))
            ->get_entity($request);

        $this->postProcessHostBuilds($request, $hostBuild, true);

        return $hostBuild;
    }

    /**
     * @param Request $request
     */
    private function etlBuildVersions(Request $request)
    {
        /** @var HostBuildEntity[] $builds */
        $builds = $this->query($request->db)
            ->sort_asc($this->getPkField())
            ->get_entities($request);

        $buildsByVersionsAndPlatforms = [];

        foreach ($builds as $build) {
            if (!array_key_exists($build->getHostVersionId(), $buildsByVersionsAndPlatforms))
                $buildsByVersionsAndPlatforms[$build->getHostVersionId()] = [];

            if (!array_key_exists($build->getPlatformId(), $buildsByVersionsAndPlatforms[$build->getHostVersionId()]))
                $buildsByVersionsAndPlatforms[$build->getHostVersionId()][$build->getPlatformId()] = [];

            $buildsByVersionsAndPlatforms[$build->getHostVersionId()][$build->getPlatformId()][] = $build;
        }

        foreach ($buildsByVersionsAndPlatforms as $hostVersionId => $buildsByVersionAndPlatforms){
            foreach ($buildsByVersionAndPlatforms as $platformId => $hostBuilds) {
                $buildVersion = 1;
                /** @var HostBuildEntity $build */
                foreach ($hostBuilds as $build) {
                    $build->updateField(DBField::BUILD_VERSION, $buildVersion)->saveEntityToDb($request);
                    $buildVersion++;
                }
            }
        }
    }

    /**
     * @param Request $request
     * @return HostBuildEntity[]
     */
    public function getAllHostBuilds(Request $request)
    {
        /** @var HostBuildEntity[] $hostBuilds */
        $hostBuilds = $this->query($request->db)->get_entities($request);

        $this->postProcessHostBuilds($request, $hostBuilds);

        return $hostBuilds;
    }

    /**
     * @param Request $request
     * @return array
     */
    public function getAllActiveHostBuildsGroupedByPlatform(Request $request)
    {
        $hostVersionsManager = $request->managers->hostVersions();

        /** @var HostBuildEntity[] $hostBuilds */
        $hostBuilds = $this->query($request->db)
            ->fields($this->selectAliasedManagerFields($hostVersionsManager))
            ->inner_join($hostVersionsManager)
            ->filter($hostVersionsManager->filters->isActive())
            ->filter($hostVersionsManager->filters->isNotDeprecated())
            ->filter($this->filters->isActive())
            ->sort_desc($hostVersionsManager->field(DBField::CREATE_TIME))
            ->sort_desc($this->field(DBField::BUILD_VERSION))
            ->get_entities($request);

        $this->postProcessHostBuilds($request, $hostBuilds, false);

        $groupedHostBuilds = [];

        foreach ($hostBuilds as $key => $hostBuild) {
            if (!array_key_exists($hostBuild->getPlatformId(), $groupedHostBuilds))
                $groupedHostBuilds[$hostBuild->getPlatformId()] = [];
            if ($hostBuild->getHostAssets())
                $groupedHostBuilds[$hostBuild->getPlatformId()][] = $hostBuild;
        }

        return $groupedHostBuilds;
    }



}

class HostBuildsActiveManager extends BaseEntityManager
{
    protected $entityClass = HostBuildActiveEntity::class;
    protected $table = Table::HostBuildActive;
    protected $table_alias = TableAlias::HostBuildActive;
    protected $pk = DBField::HOST_BUILD_ACTIVE_ID;

    public static $fields = [
        DBField::HOST_BUILD_ACTIVE_ID,
        DBField::HOST_BUILD_ID,
        DBField::PLATFORM_ID,

        DBField::IS_ACTIVE,
        DBField::CREATE_TIME,
        DBField::CREATED_BY,
        DBField::MODIFIED_BY,
        DBField::DELETED_BY
    ];

    public $foreign_managers = [
        PlatformsManager::class => DBField::PLATFORM_ID,
        HostBuildsManager::class => DBField::HOST_BUILD_ID,
    ];

    /**
     * @param HostBuildActiveEntity $data
     * @param Request $request * @return HostBuildEntity|void
     */
    public function processVFields(DBManagerEntity $data, Request $request)
    {
        if (!$data->hasField(VField::HOST_BUILD))
            $data->updateField(VField::HOST_BUILD, []);
    }

    /**
     * @param Request $request
     * @param $platformId
     */
    public function deactivateActivePlatformHostBuilds(Request $request, $platformId)
    {
        /** @var HostBuildActiveEntity[] $activeHostBuilds */
        $activeHostBuilds = $this->query($request->db)
            ->filter($this->filters->byPlatformId($platformId))
            ->filter($this->filters->isActive())
            ->get_entities($request);

        foreach ($activeHostBuilds as $activeHostBuild) {
            $this->deactivateEntity($request, $activeHostBuild);
        }
    }

    /**
     * @param Request $request
     * @param $hostBuildId
     * @param $platformId
     * @return HostBuildActiveEntity
     * @throws EntityFieldAccessException
     * @throws ESCFrameworkException
     */
    public function createNewActiveHostBuild(Request $request, $hostBuildId, $platformId)
    {
        $data = [
            DBField::HOST_BUILD_ID => $hostBuildId,
            DBField::PLATFORM_ID => $platformId,
            DBField::IS_ACTIVE => 1,
            DBField::CREATE_TIME => $request->getCurrentSqlTime(),
        ];

        $this->deactivateActivePlatformHostBuilds($request, $platformId);

        /** @var HostBuildActiveEntity $activeHostBuild */
        $activeHostBuild = $this->query($request->db)->createNewEntity($request, $data);

        if (!$request->settings()->is_dev()) {
            $hostVersionsManager = $request->managers->hostVersions();
            $hostBuildManager = $request->managers->hostBuilds();
            $hostPlatformManager = $request->managers->platforms();

            $hostBuild = $hostBuildManager->getHostBuildById($request, $activeHostBuild->getHostBuildId());
            $hostVersion = $hostVersionsManager->getHostVersionById($request, $hostBuild->getHostVersionId());
            $platform = $hostPlatformManager->getPlatformById($request, $activeHostBuild->getPlatformId());
            $user = $request->user->getEntity();

            $link = $request->getWwwUrl("/admin/host-app/");

            Modules::load_helper(Helpers::SLACK);
            $slackMessage = "ESC HOST {$hostVersion->getVersion()}.{$hostBuild->getBuildVersion()} for {$platform->getSlug()} is now available";

            $slackAttachment = new SlackAttachment(
                $user,
                "ESC HOST - {$hostVersion->getVersion()}.{$hostBuild->getBuildVersion()} for {$platform->getSlug()}.",
                $link,
                null,
                new SlackActionButton('View', $link),
                new SlackField('Environment', $request->host),
                new SlackField('Published By', $user->getEmailAddress())
            );

            SlackHelper::sendCard($slackMessage, $slackAttachment);
        }

        return $activeHostBuild;
    }

    /**
     * @param Request $request
     * @return HostBuildActiveEntity[]
     */
    public function getActiveHostBuilds(Request $request)
    {
        $hostBuildsManager = $request->managers->hostBuilds();
        $hostVersionsManager = $request->managers->hostVersions();
        $platformsManager = $request->managers->platforms();

        $joinHostVersionsFilter = $hostVersionsManager->filters->byPk($hostBuildsManager->field(DBField::HOST_VERSION_ID));


        /** @var HostBuildActiveEntity[] $activeHostBuilds */
        $activeHostBuilds = $this->query($request->db)
            ->fields($this->selectAliasedManagerFields($hostBuildsManager, $hostVersionsManager, $platformsManager))
            ->inner_join($hostBuildsManager)
            ->inner_join($platformsManager)
            ->inner_join($hostVersionsManager, $joinHostVersionsFilter)
            ->filter($this->filters->isActive())
            ->filter($hostBuildsManager->filters->isActive())
            ->get_entities($request);

        return $activeHostBuilds;
    }
}
