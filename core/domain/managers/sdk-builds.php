<?php
/**
 * Created by PhpStorm.
 * User: christophercarter
 * Date: 11/29/18
 * Time: 12:16 PM
 */


Entities::uses('sdk-builds');

class SdkVersionsManager extends BaseEntityManager
{
    protected $entityClass = SdkVersionEntity::class;
    protected $table = Table::SdkVersion;
    protected $table_alias = TableAlias::SdkVersion;
    protected $pk = DBField::SDK_VERSION_ID;

    const UPDATE_CHANNEL_LIVE = 'live';
    const UPDATE_CHANNEL_TEST = 'test';

    public static $fields = [
        DBField::SDK_VERSION_ID,
        DBField::VERSION,
        DBField::USER_ID,
        DBField::SDK_UPDATE_CHANNEL,
        DBField::IS_DEPRECATED,
        DBField::IS_ACTIVE,
        DBField::CREATE_TIME,
        DBField::CREATED_BY,
        DBField::MODIFIED_BY,
        DBField::DELETED_BY
    ];

    /**
     * @param SdkVersionEntity $data
     * @param Request $request
     * @return SdkVersionEntity
     */
    public function processVFields(DBManagerEntity $data, Request $request)
    {
        if (!$data->hasField(VField::SDK_BUILDS))
            $data->updateField(VField::SDK_BUILDS, []);

        if (!$data->hasField(VField::USER))
            $data->updateField(VField::USER, []);

        $editUrl = $request->getWwwUrl("/admin/sdk/edit-version/{$data->getPk()}");
        $data->updateField(VField::EDIT_URL, $editUrl);

        return parent::processVFields($data, $request); // TODO: Change the autogenerated stub
    }

    /**
     * @param Request $request
     * @param SdkVersionEntity|SdkVersionEntity[]
     */
    protected function postProcessSdkVersions(Request $request, $sdkVersions, $expand = true)
    {
        $usersManager = $request->managers->users();
        $sdkBuildsManager = $request->managers->sdkBuilds();

        if ($sdkVersions) {
            if ($sdkVersions instanceof SdkVersionEntity)
                $sdkVersions = [$sdkVersions];

            /** @var SdkVersionEntity[] $sdkVersions */
            $sdkVersions = array_index($sdkVersions, $this->getPkField());
            $sdkVersionIds = array_keys($sdkVersions);

            $userIds = unique_array_extract(DBField::USER_ID, $sdkVersions);
            $users = $usersManager->getUsersByIds($request, $userIds);
            /** @var UserEntity[] $users */
            $users = array_index($users, $usersManager->getPkField());

            $sdkBuilds = $sdkBuildsManager->getSdkBuildsBySdkVersionId($request, $sdkVersionIds, $expand);
            foreach ($sdkBuilds as $sdkBuild) {
                $sdkVersions[$sdkBuild->getSdkVersionId()]->setSdkBuild($sdkBuild);
            }

            foreach ($sdkVersions as $sdkVersion) {
                if (isset($users[$sdkVersion->getUserId()]))
                    $sdkVersion->setUser($users[$sdkVersion->getUserId()]);
            }
        }
    }

    /**
     * @param Request $request
     * @param $sdkVersionIds
     * @param bool $expand
     * @return SdkVersionEntity[]
     */
    public function getSdkVersionsByIds(Request $request, $sdkVersionIds, $expand = false)
    {
        $sdkVersions = $this->query($request->db)
            ->filter($this->filters->byPk($sdkVersionIds))
            ->get_entities($request);

        if ($expand)
            $this->postProcessSdkVersions($request, $sdkVersions);

        if ($sdkVersions)
            $sdkVersions = array_index($sdkVersions, $this->getPkField());

        return $sdkVersions;
    }

    /**
     * @param Request $request
     * @param $sdkVersionNumber
     * @param string $sdkUpdateChannel
     * @return SdkVersionEntity
     */
    public function createNewSdkVersion(Request $request, $sdkVersionNumber, $sdkUpdateChannel = self::UPDATE_CHANNEL_LIVE)
    {
        $data = [
            DBField::VERSION => $sdkVersionNumber,
            DBField::SDK_UPDATE_CHANNEL => $sdkUpdateChannel,
            DBField::USER_ID => $request->user->id,
        ];

        /** @var SdkVersionEntity $sdkVersion */
        $sdkVersion = $this->query($request->db)->createNewEntity($request, $data);

        return $sdkVersion;
    }

    /**
     * @param Request $request
     * @param $sdkVersionId
     * @param bool $expand
     * @return SdkVersionEntity
     */
    public function getSdkVersionById(Request $request, $sdkVersionId, $expand = false)
    {
        /** @var SdkVersionEntity $sdkVersion */
        $sdkVersion = $this->query($request->db)
            ->filter($this->filters->byPk($sdkVersionId))
            ->get_entity($request);

        $this->postProcessSdkVersions($request, $sdkVersion, $expand);

        return $sdkVersion;
    }

    /**
     * @param Request $request
     * @param string $sdkUpdateChannel
     * @return SdkVersionEntity
     */
    public function getActiveSdkVersionBySdkUpdateChannel(Request $request, $sdkUpdateChannel = self::UPDATE_CHANNEL_LIVE)
    {
        /** @var SdkVersionEntity $sdkVersion */
        $sdkVersion = $this->query($request->db)
            ->filter($this->filters->bySdkUpdateChannel($sdkUpdateChannel))
            ->filter($this->filters->isActive())
            ->sort_desc($this->getPkField())
            ->get_entity($request);

        $this->postProcessSdkVersions($request, $sdkVersion);

        return $sdkVersion;
    }

    /**
     * @param Request $request
     * @param $sdkVersionNumber
     * @param $sdkPlatformId
     * @param string $channel
     * @return SdkVersionEntity
     */
    public function getSdkVersionBySdkVersionNumberAndPlatformId(Request $request, $sdkVersionNumber, $sdkPlatformId,
                                                                 $channel = self::UPDATE_CHANNEL_LIVE)
    {
        $sdkBuildsManager = $request->managers->sdkBuilds();

        $joinSdkBuildsFilter = $sdkBuildsManager->filters->And_(
            $sdkBuildsManager->filters->bySdkVersionId($this->createPkField()),
            $sdkBuildsManager->filters->isActive()
        );

        /** @var SdkVersionEntity $sdkVersion */
        $sdkVersion = $this->query($request->db)
            ->inner_join($sdkBuildsManager, $joinSdkBuildsFilter)
            ->filter($this->filters->byVersion($sdkVersionNumber))
            ->filter($this->filters->isActive())
            ->filter($this->filters->bySdkUpdateChannel($channel))
            ->filter($sdkBuildsManager->filters->bySdkPlatformId($sdkPlatformId))
            ->sort_desc($sdkBuildsManager->field(DBField::CREATE_TIME))
            ->sort_desc($this->field(DBField::CREATE_TIME))
            ->get_entity($request);

        //$this->postProcessSdkVersions($request, $sdkVersion, true);

        return $sdkVersion;
    }

    public function getSdkVersionBySdkVersionNumber(Request $request, $sdkVersionNumber,
                                                                   $expand = false,
                                                                   $channel = self::UPDATE_CHANNEL_LIVE)
    {

        /** @var SdkVersionEntity $sdkVersion */
        $sdkVersion = $this->query($request->db)
            ->filter($this->filters->byVersion($sdkVersionNumber))
            ->filter($this->filters->isActive())
            ->filter($this->filters->bySdkUpdateChannel($channel))
            ->sort_desc($this->field(DBField::CREATE_TIME))
            ->get_entity($request);

        if ($expand) {
            $this->postProcessSdkVersions($request, $sdkVersion, $expand);
        }

        return $sdkVersion;
    }


    /**
     * @param Request $request
     * @param string $sdkUpdateChannel
     * @return SdkVersionEntity[]
     */
    public function getActiveSdkVersions(Request $request, $includeDeprecated = false)
    {
        $deprecatedFilter = $includeDeprecated ? null : $this->filters->isNotDeprecated();

        /** @var SdkVersionEntity[] $sdkVersions */
        $sdkVersions = $this->query($request->db)
            ->filter($this->filters->isActive())
            ->filter($deprecatedFilter)
            ->sort_desc($this->getPkField())
            ->get_entities($request);

        $this->postProcessSdkVersions($request, $sdkVersions);

        return $sdkVersions;
    }
}

class SdkBuildsManager extends BaseEntityManager
{
    protected $entityClass = SdkBuildEntity::class;
    protected $table = Table::SdkBuild;
    protected $table_alias = TableAlias::SdkBuild;
    protected $pk = DBField::SDK_BUILD_ID;

    const ZIP_ROOT_FILE_IDENTIFIER = 'builder-effective-config.yaml';

    public static $fields = [
        DBField::SDK_BUILD_ID,
        DBField::SDK_VERSION_ID,
        DBField::SDK_PLATFORM_ID,
        DBField::VERSION_HASH,
        DBField::BUILD_VERSION,
        DBField::USER_ID,
        DBField::IS_ACTIVE,
        DBField::CREATE_TIME,
        DBField::CREATED_BY,
        DBField::MODIFIED_BY,
        DBField::DELETED_BY
    ];

    public $foreign_managers = [
        SdkPlatformsManager::class => DBField::SDK_PLATFORM_ID,
        SdkVersionsManager::class => DBField::SDK_VERSION_ID,
    ];

    /**
     * @return string
     */
    public function getZipRootFileIdentifier()
    {
        return self::ZIP_ROOT_FILE_IDENTIFIER;
    }

    /**
     * @return string
     */
    public function generateZipDestinationPath()
    {
        global $CONFIG;

        $mediaDir = $CONFIG[ESCConfiguration::DIR_MEDIA];

        $uniqueDirName = uuidV4HostName();

        return "{$mediaDir}/sdk/build-{$uniqueDirName}/";
    }


    /**
     * @param SdkBuildEntity $data
     * @param Request $request* @return SdkBuildEntity|void
     */
    public function processVFields(DBManagerEntity $data, Request $request)
    {
        if (!$data->hasField(VField::SDK_ASSETS))
            $data->updateField(VField::SDK_ASSETS, []);

        if (!$data->hasField(VField::PLATFORM))
            $data->updateField(VField::PLATFORM, []);

        if (!$data->hasField(VField::SDK_VERSION))
            $data->updateField(VField::SDK_VERSION, []);
    }

    /**
     * @param Request $request
     * @param SdkBuildEntity[] $sdkBuilds
     */
    protected function postProcessSdkBuilds(Request $request, $sdkBuilds = [], $expand = false)
    {
        $sdkAssetsManager = $request->managers->sdkAssets();
        $sdkPlatformsManager = $request->managers->sdkPlatforms();
        $usersManager = $request->managers->users();

        if ($sdkBuilds) {
            if ($sdkBuilds instanceof SdkBuildEntity)
                $sdkBuilds = [$sdkBuilds];

            /** @var SdkBuildEntity[] $sdkBuilds */
            $sdkBuilds = array_index($sdkBuilds, $this->getPkField());
            $sdkBuildIds = array_keys($sdkBuilds);

            $userIds = unique_array_extract(DBField::USER_ID, $sdkBuilds);

            $users = $usersManager->getUsersByIds($request, $userIds);
            /** @var UserEntity[] $users */
            $users = array_index($users, $usersManager->getPkField());

            $sdkPlatforms = $sdkPlatformsManager->getAllSdkPlatforms($request);
            /** @var SdkPlatformEntity[] $sdkPlatforms */
            $sdkPlatforms = array_index($sdkPlatforms, $sdkPlatformsManager->getPkField());

            foreach ($sdkBuilds as $sdkBuild) {
                $sdkPlatform = $sdkPlatforms[$sdkBuild->getSdkPlatformId()];
                $sdkBuild->setSdkPlatform($sdkPlatform);

                if (isset($users[$sdkBuild->getUserId()]))
                    $sdkBuild->setUser($users[$sdkBuild->getUserId()]);
            }

            $sdkBuildAssets = $sdkAssetsManager->getSdkBuildAssetsBySdkBuildIds($request, $sdkBuildIds);

            foreach ($sdkBuildAssets as $sdkBuildAsset) {
                $sdkBuilds[$sdkBuildAsset->getSdkBuildId()]->setSdkAsset($sdkBuildAsset);
            }
        }
    }

    /**
     * @param Request $request
     * @param $psdkPlatformId
     * @param $sdkVersionId
     * @return int|string
     */
    public function getNextBuildNumberForPlatformVersion(Request $request, $psdkPlatformId, $sdkVersionId)
    {
        try {

            $buildVersion = $this->query($request->db)
                ->filter($this->filters->bySdkPlatformId($psdkPlatformId))
                ->filter($this->filters->bySdkVersionId($sdkVersionId))
                ->sort_desc($this->field(DBField::BUILD_VERSION))
                ->get_value(DBField::BUILD_VERSION);

            $buildVersion++;

        } catch (ObjectNotFound $e) {
            $buildVersion = 1;
        }

        return $buildVersion;
    }

    /**
     * @param Request $request
     * @param $sdkVersionId
     * @param $platformId
     * @param $sdkBuildVersionNumber
     * @return SdkBuildEntity
     */
    public function createNewSdkBuild(Request $request, $sdkVersionId, $platformId, $versionHash = null)
    {
        $buildVersion = $this->getNextBuildNumberForPlatformVersion($request, $platformId, $sdkVersionId);

        $data = [
            DBField::SDK_VERSION_ID => $sdkVersionId,
            DBField::SDK_PLATFORM_ID => $platformId,
            DBField::VERSION_HASH => $versionHash,
            DBField::BUILD_VERSION => $buildVersion,
            DBField::CREATE_TIME => $request->getCurrentSqlTime(),
            DBField::USER_ID => $request->user->id,
        ];

        /** @var SdkBuildEntity $sdkBuild */
        $sdkBuild = $this->query($request->db)->createNewEntity($request, $data);

        return $sdkBuild;
    }

    /**
     * @param Request $request
     * @param $versionHash
     * @return array|SdkBuildEntity
     */
    public function getSdkBuildByVersionHash(Request $request, $versionHash)
    {
        return $this->query($request->db)
            ->filter($this->filters->byVersionHash($versionHash))
            ->get_entity($request);
    }

    /**
     * @param Request $request
     * @param $sdkBuildId
     * @return array|SdkBuildEntity
     */
    public function getSdkBuildById(Request $request, $sdkBuildId, $expand = false)
    {
        /** @var SdkBuildEntity $sdkBuild */
        $sdkBuild = $this->query($request)
            ->filter($this->filters->bySdkBuildId($sdkBuildId))
            ->get_entity($request);

        $this->postProcessSdkBuilds($request, $sdkBuild, $expand);

        return $sdkBuild;
    }

    /**
     * @param Request $request
     * @param $sdkVersionId
     * @param bool $expand
     * @return SdkBuildEntity[]
     */
    public function getSdkBuildsBySdkVersionId(Request $request, $sdkVersionId, $expand = false)
    {
        /** @var SdkBuildEntity[] $sdkBuilds */
        $sdkBuilds = $this->query($request)
            ->filter($this->filters->isActive())
            ->filter($this->filters->bySdkVersionId($sdkVersionId))
            ->get_entities($request);

        $this->postProcessSdkBuilds($request, $sdkBuilds, $expand);

        return $sdkBuilds;
    }

    /**
     * @param Request $request
     * @param $sdkPlatformSlug
     * @param string $sdkUpdateChannel
     * @param bool $expand
     * @return SdkBuildEntity
     * @throws ObjectNotFound
     */
    public function getLatestSdkBuildBySdkPlatform(Request $request, $sdkPlatformSlug, $sdkUpdateChannel = SdkVersionsManager::UPDATE_CHANNEL_LIVE, $expand = true)
    {
        $sdkPlatformsManager = $request->managers->sdkPlatforms();
        $sdkVersionsManager = $request->managers->sdkVersions();
        $sdkBuildsActiveManager = $request->managers->sdkBuildsActive();

        $joinSdkBuildsActiveFilter = $sdkBuildsActiveManager->filters->And_(
            $sdkBuildsActiveManager->filters->bySdkBuildId($this->createPkField()),
            $sdkBuildsActiveManager->filters->bySdkPlatformId($this->field(DBField::SDK_PLATFORM_ID)),
            $sdkBuildsActiveManager->filters->isActive()
        );

        /** @var SdkBuildEntity $sdkBuild */
        $sdkBuild = $this->query($request->db)
            ->fields($this->selectAliasedManagerFields($sdkVersionsManager))
            ->inner_join($sdkPlatformsManager)
            ->inner_join($sdkVersionsManager)
            ->inner_join($sdkBuildsActiveManager, $joinSdkBuildsActiveFilter)
            ->filter($this->filters->isActive())
            ->filter($sdkPlatformsManager->filters->bySlug($sdkPlatformSlug))
            ->filter($sdkPlatformsManager->filters->isActive())
            ->filter($sdkVersionsManager->filters->isActive())
            ->filter($sdkVersionsManager->filters->bySdkUpdateChannel($sdkUpdateChannel))
            ->sort_desc($sdkVersionsManager->field(DBField::CREATE_TIME))
            ->sort_desc($this->field(DBField::CREATE_TIME))
            ->get_entity($request);

        if($expand) {
            $this->postProcessSdkBuilds($request, $sdkBuild, $expand);
        }

        return $sdkBuild;
    }

    /**
     * @param Request $request
     * @return SdkBuildEntity[]
     */
    public function getAllSdkBuilds(Request $request)
    {
        /** @var SdkBuildEntity[] $sdkBuilds */
        $sdkBuilds = $this->query($request->db)->get_entities($request);

        $this->postProcessSdkBuilds($request, $sdkBuilds);

        return $sdkBuilds;
    }

    /**
     * @param Request $request
     * @return array
     */
    public function getAllActiveSdkBuildsGroupedBySdkPlatform(Request $request)
    {
        $sdkVersionsManager = $request->managers->sdkVersions();

        /** @var SdkBuildEntity[] $sdkBuilds */
        $sdkBuilds = $this->query($request->db)
            ->fields($this->selectAliasedManagerFields($sdkVersionsManager))
            ->inner_join($sdkVersionsManager)
            ->filter($sdkVersionsManager->filters->isActive())
            ->filter($sdkVersionsManager->filters->isNotDeprecated())
            ->filter($this->filters->isActive())
            ->sort_desc($sdkVersionsManager->field(DBField::CREATE_TIME))
            ->sort_desc($this->field(DBField::BUILD_VERSION))
            ->get_entities($request);

        $this->postProcessSdkBuilds($request, $sdkBuilds, false);

        $groupedSdkBuilds = [];

        foreach ($sdkBuilds as $key => $sdkBuild) {
            if (!array_key_exists($sdkBuild->getSdkPlatformId(), $groupedSdkBuilds))
                $groupedSdkBuilds[$sdkBuild->getSdkPlatformId()] = [];
            if ($sdkBuild->getSdkAssets())
                $groupedSdkBuilds[$sdkBuild->getSdkPlatformId()][] = $sdkBuild;
        }

        return $groupedSdkBuilds;
    }



}

class SdkBuildsActiveManager extends BaseEntityManager
{
    protected $entityClass = SdkBuildActiveEntity::class;
    protected $table = Table::SdkBuildActive;
    protected $table_alias = TableAlias::SdkBuildActive;
    protected $pk = DBField::SDK_BUILD_ACTIVE_ID;

    public static $fields = [
        DBField::SDK_BUILD_ACTIVE_ID,
        DBField::SDK_BUILD_ID,
        DBField::SDK_PLATFORM_ID,

        DBField::IS_ACTIVE,
        DBField::CREATE_TIME,
        DBField::CREATED_BY,
        DBField::MODIFIED_BY,
        DBField::DELETED_BY
    ];

    public $foreign_managers = [
        SdkPlatformsManager::class => DBField::SDK_PLATFORM_ID,
        SdkBuildsManager::class => DBField::SDK_BUILD_ID,
    ];

    /**
     * @param SdkBuildActiveEntity $data
     * @param Request $request * @return SdkBuildEntity|void
     */
    public function processVFields(DBManagerEntity $data, Request $request)
    {
        if (!$data->hasField(VField::SDK_BUILD))
            $data->updateField(VField::SDK_BUILD, []);
    }

    /**
     * @param Request $request
     * @param $sdkPlatformId
     */
    public function deactivateActiveSdkPlatformSdkBuilds(Request $request, $sdkPlatformId)
    {
        /** @var SdkBuildActiveEntity[] $activeSdkBuilds */
        $activeSdkBuilds = $this->query($request->db)
            ->filter($this->filters->bySdkPlatformId($sdkPlatformId))
            ->filter($this->filters->isActive())
            ->get_entities($request);

        foreach ($activeSdkBuilds as $activeSdkBuild) {
            $this->deactivateEntity($request, $activeSdkBuild);
        }
    }

    /**
     * @param Request $request
     * @param $sdkBuildId
     * @param $sdkPlatformId
     * @return SdkBuildActiveEntity
     * @throws EntityFieldAccessException
     * @throws ESCFrameworkException
     */
    public function createNewActiveSdkBuild(Request $request, $sdkBuildId, $sdkPlatformId)
    {
        $data = [
            DBField::SDK_BUILD_ID => $sdkBuildId,
            DBField::SDK_PLATFORM_ID => $sdkPlatformId,
            DBField::IS_ACTIVE => 1,
            DBField::CREATE_TIME => $request->getCurrentSqlTime(),
        ];

        $this->deactivateActiveSdkPlatformSdkBuilds($request, $sdkPlatformId);

        /** @var SdkBuildActiveEntity $activeSdkBuild */
        $activeSdkBuild = $this->query($request->db)->createNewEntity($request, $data);
        if (!$request->settings()->is_dev()) {
            $sdkVersionsManager = $request->managers->sdkVersions();
            $sdkBuildManager = $request->managers->sdkBuilds();
            $sdkPlatformManager = $request->managers->sdkPlatforms();

            $sdkBuild = $sdkBuildManager->getSdkBuildById($request, $activeSdkBuild->getSdkBuildId());
            $sdkVersion = $sdkVersionsManager->getSdkVersionById($request, $sdkBuild->getSdkVersionId());
            $platform = $sdkPlatformManager->getSdkPlatformById($request, $activeSdkBuild->getSdkPlatformId());
            $user = $request->user->getEntity();

            $link = $request->getWwwUrl("/admin/sdk/");

            Modules::load_helper(Helpers::SLACK);
            $slackMessage = "ESC SDK {$sdkVersion->getVersion()}.{$sdkBuild->getBuildVersion()} for {$platform->getSlug()} is now available";

            $slackAttachment = new SlackAttachment(
                $user,
                "ESC SDK - {$sdkVersion->getVersion()}.{$sdkBuild->getBuildVersion()} for {$platform->getSlug()}.",
                $link,
                null,
                new SlackActionButton('View', $link),
                new SlackField('Environment', $request->host),
                new SlackField('Published By', $user->getEmailAddress())
            );

            SlackHelper::sendCard($slackMessage, $slackAttachment);
        }

        return $activeSdkBuild;
    }

    /**
     * @param Request $request
     * @return SdkBuildActiveEntity[]
     */
    public function getActiveSdkBuilds(Request $request)
    {
        $sdkBuildsManager = $request->managers->sdkBuilds();
        $sdkVersionsManager = $request->managers->sdkVersions();
        $sdkPlatformsManager = $request->managers->sdkPlatforms();

        $joinSdkVersionsFilter = $sdkVersionsManager->filters->byPk($sdkBuildsManager->field(DBField::SDK_VERSION_ID));


        /** @var SdkBuildActiveEntity[] $activeSdkBuilds */
        $activeSdkBuilds = $this->query($request->db)
            ->fields($this->selectAliasedManagerFields($sdkBuildsManager, $sdkVersionsManager, $sdkPlatformsManager))
            ->inner_join($sdkBuildsManager)
            ->inner_join($sdkPlatformsManager)
            ->inner_join($sdkVersionsManager, $joinSdkVersionsFilter)
            ->filter($this->filters->isActive())
            ->filter($sdkBuildsManager->filters->isActive())
            ->get_entities($request);

        return $activeSdkBuilds;
    }
}
